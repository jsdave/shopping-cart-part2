{"ast":null,"code":"var _jsxFileName = \"/Users/david/Documents/mycode/react/shopping-cart/shopping-cart/shopping-cart/shopping-cart/src/features/product-listing/product-list-item.js\";\nimport React from 'react'; // Will take some props. Will return a div. Inside div display the product. H3 for the name props.name. Do an image tag, height equal to 100, since it is a number in react we will give it curly braces so JavaScript will read as a number not a string. It will have a title will use props.name, have src will do curly braces and backticks for template string. If we look at the products.json we can see that image gives us a file name. \n// Then do a div with props.description, for the description of the product. Then another div props.price and add dollar sign $. Add a button that says Add to cart. \n\nconst ProductListItem = props => {\n  // pass the cart in. This filter call will return the array but we only want the first item in this cart. \n  const thisItemInCart = props.cart.filter(item => item.id === props.product.id)[0];\n  return React.createElement(\"div\", {\n    className: \"product-list-item\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, props.product.name), React.createElement(\"img\", {\n    height: 100,\n    title: props.product.name,\n    src: `/products/${props.product.image}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, props.product.description), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"$\", props.product.price), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: () => props.addToCart(props.product),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Add to cart (\", // if thisItemInCart is undefined or null the && will short circuit, the or will fire and we will get a 0. Put parenthesis around first part to execute first. This will evaluate as a true or a false (thisItemInCart && thisItemInCart.quantity). If true then quantity will print out else 0.\n  thisItemInCart && thisItemInCart.quantity || 0, \")\")));\n};\n\nexport default productListItem;","map":{"version":3,"sources":["/Users/david/Documents/mycode/react/shopping-cart/shopping-cart/shopping-cart/shopping-cart/src/features/product-listing/product-list-item.js"],"names":["React","ProductListItem","props","thisItemInCart","cart","filter","item","id","product","name","image","description","price","addToCart","quantity","productListItem"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAIA;AACA;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B;AACA,QAAMC,cAAc,GAAGD,KAAK,CAACE,IAAN,CAAWC,MAAX,CAAkBC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYL,KAAK,CAACM,OAAN,CAAcD,EAApD,EAAwD,CAAxD,CAAvB;AAEA,SAAO;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKL,KAAK,CAACM,OAAN,CAAcC,IAAnB,CADG,EAEH;AACI,IAAA,MAAM,EAAE,GADZ;AAEI,IAAA,KAAK,EAAEP,KAAK,CAACM,OAAN,CAAcC,IAFzB;AAGI,IAAA,GAAG,EAAG,aAAYP,KAAK,CAACM,OAAN,CAAcE,KAAM,EAH1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFG,EAOH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMR,KAAK,CAACM,OAAN,CAAcG,WAApB,CAPG,EAQH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAOT,KAAK,CAACM,OAAN,CAAcI,KAArB,CARG,EASH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,OAAO,EAAE,MAAMV,KAAK,CAACW,SAAN,CAAgBX,KAAK,CAACM,OAAtB,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI;AACCL,EAAAA,cAAc,IAAIA,cAAc,CAACW,QAAlC,IAA+C,CAFnD,MADJ,CATG,CAAP;AAkBH,CAtBD;;AAwBA,eAAeC,eAAf","sourcesContent":["import React from 'react';\n\n\n\n// Will take some props. Will return a div. Inside div display the product. H3 for the name props.name. Do an image tag, height equal to 100, since it is a number in react we will give it curly braces so JavaScript will read as a number not a string. It will have a title will use props.name, have src will do curly braces and backticks for template string. If we look at the products.json we can see that image gives us a file name. \n// Then do a div with props.description, for the description of the product. Then another div props.price and add dollar sign $. Add a button that says Add to cart. \nconst ProductListItem = (props) => {\n    // pass the cart in. This filter call will return the array but we only want the first item in this cart. \n    const thisItemInCart = props.cart.filter(item => item.id === props.product.id)[0];\n\n    return <div className='product-list-item'>\n        <h3>{props.product.name}</h3>\n        <img\n            height={100}\n            title={props.product.name}\n            src={`/products/${props.product.image}`}\n        />\n        <div>{props.product.description}</div>\n        <div>${props.product.price}</div>\n        <div>\n            <button onClick={() => props.addToCart(props.product)}>Add to cart ({\n                // if thisItemInCart is undefined or null the && will short circuit, the or will fire and we will get a 0. Put parenthesis around first part to execute first. This will evaluate as a true or a false (thisItemInCart && thisItemInCart.quantity). If true then quantity will print out else 0.\n                (thisItemInCart && thisItemInCart.quantity) || 0\n            })</button>\n        </div>\n\n    </div>\n\n}\n\nexport default productListItem;"]},"metadata":{},"sourceType":"module"}