{"ast":null,"code":"var _jsxFileName = \"/Users/david/Documents/mycode/react/shopping-cart/shopping-cart/shopping-cart/shopping-cart/src/features/product-listing/index.js\";\nimport React from 'react';\nimport ProductListItem from './product-list-item'; // It returns a div and then iterate over props.products which we are going to pass in. Dot map which is our iteration function. Each iteration we are going to be a product. Create another component that will be a product list item that will be responsible for displaying a single product in our product list. Just product, instead of props.product, since we already iterating over and getting that value. Inside of product listing create new component. \n// Create a div and for every product its going to iterate over that product and create a product list item component. Passing the product in so we can get those values. Go to pages and home. \n\nconst ProductListing = props => {\n  return React.createElement(\"div\", {\n    className: \"product-listing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.products.map(product => React.createElement(ProductListItem, {\n    product: product,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  })));\n}; // grab all values of our cart state and map it to props. So we can say props.cart and gives us everything inside the of the cart inside of this component; get those values. Takes an argument of state.   \n\n\nconst mapStateToProps = state => {\n  // return the key that we want\n  return {\n    cart: state.cart\n  };\n}; // actions to are going to add stuff and remove stuff from the cart. We need to do a mapDispatchToProps which will map all of our actions to props on this component and the argument is dispatch which is the shortcut for store.dispatch, which dispatch is an action onto our store. Return a new action; addToCart is going to be the action. Take an item, an arrow function that will return a JavaScript object; call dispatch which comes from the argument, which dispatch is an action to our store. Look back at the reducer.js we got action.payload and action.type, that's where these are being used. \n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addToCart: item => {\n      dispatch({\n        type: 'ADD',\n        payload: item\n      });\n    }\n  };\n}\n\nexport default ProductListing;","map":{"version":3,"sources":["/Users/david/Documents/mycode/react/shopping-cart/shopping-cart/shopping-cart/shopping-cart/src/features/product-listing/index.js"],"names":["React","ProductListItem","ProductListing","props","products","map","product","mapStateToProps","state","cart","mapDispatchToProps","dispatch","addToCart","item","type","payload"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,eAAP,MAA4B,qBAA5B,C,CAEA;AACA;;AACA,MAAMC,cAAc,GAAIC,KAAD,IAAW;AAC9B,SAAO;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAECA,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAmBC,OAAO,IACtB,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAEA,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFD,CAAP;AAMH,CAPD,C,CASA;;;AACA,MAAMC,eAAe,GAAIC,KAAD,IAAW;AAC/B;AACA,SAAO;AACHC,IAAAA,IAAI,EAAED,KAAK,CAACC;AADT,GAAP;AAIH,CAND,C,CAQA;;;AAEA,SAASC,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHC,IAAAA,SAAS,EAAGC,IAAD,IAAU;AACjBF,MAAAA,QAAQ,CAAC;AAAEG,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,OAAO,EAAEF;AAAxB,OAAD,CAAR;AACH;AAHE,GAAP;AAQH;;AAID,eAAeX,cAAf","sourcesContent":["import React from 'react';\nimport ProductListItem from './product-list-item';\n\n// It returns a div and then iterate over props.products which we are going to pass in. Dot map which is our iteration function. Each iteration we are going to be a product. Create another component that will be a product list item that will be responsible for displaying a single product in our product list. Just product, instead of props.product, since we already iterating over and getting that value. Inside of product listing create new component. \n// Create a div and for every product its going to iterate over that product and create a product list item component. Passing the product in so we can get those values. Go to pages and home. \nconst ProductListing = (props) => {\n    return <div className=\"product-listing\">\n        {\n            props.products.map(product =>\n                <ProductListItem product={product} />)\n        }\n    </div>\n}\n\n// grab all values of our cart state and map it to props. So we can say props.cart and gives us everything inside the of the cart inside of this component; get those values. Takes an argument of state.   \nconst mapStateToProps = (state) => {\n    // return the key that we want\n    return {\n        cart: state.cart,\n    }\n\n}\n\n// actions to are going to add stuff and remove stuff from the cart. We need to do a mapDispatchToProps which will map all of our actions to props on this component and the argument is dispatch which is the shortcut for store.dispatch, which dispatch is an action onto our store. Return a new action; addToCart is going to be the action. Take an item, an arrow function that will return a JavaScript object; call dispatch which comes from the argument, which dispatch is an action to our store. Look back at the reducer.js we got action.payload and action.type, that's where these are being used. \n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addToCart: (item) => {\n            dispatch({ type: 'ADD', payload: item })\n        }\n    }\n\n\n\n}\n\n\n\nexport default ProductListing;"]},"metadata":{},"sourceType":"module"}