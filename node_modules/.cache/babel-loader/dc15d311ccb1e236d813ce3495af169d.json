{"ast":null,"code":"// an arrow function\n// first argument is always state.\n// we want it to be an array; empty array as a default.\nconst cartReducer = (state = [], action) => {\n  switch (action.type) {\n    // case for add; use inmutable JavaScript spread operator to take what we already had in the state.\n    // 1. take 7 items out of the original state array and dump them one by one into this new array. \n    // 2. action.payload takes item we are adding to the cart and adds it ot the end.   \n    // 3. returns a brand new array, that's going to have all the avlues of the old array plus the new value that we are adding in. \n    case 'ADD':\n      return [...state, action.payload];\n    // Case for Remove; const for the firstMatchIndex, just return the first index we want to remove. If more than one of these \"action.payload\" in our current cart will grab first one and return the index of that item. \n    // Description of return; will filter out the first item and give us the remaining items. Give us all of the items except for our first match. \n\n    case 'REMOVE':\n      const firstMatchIndex = state.indexOf(action.payload);\n      return state.filter((item, index) => index !== firstMatchIndex);\n\n    case 'DEFAULT':\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/david/Documents/mycode/react/shopping-cart/shopping-cart/shopping-cart/shopping-cart/src/features/cart/reducer.js"],"names":["cartReducer","state","action","type","payload","firstMatchIndex","indexOf","filter","item","index"],"mappings":"AAAA;AACA;AACA;AAEA,MAAMA,WAAW,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AACxC,UAAQA,MAAM,CAACC,IAAf;AACI;AACA;AACA;AACA;AAEA,SAAK,KAAL;AACI,aAAO,CAAC,GAAGF,KAAJ,EAAWC,MAAM,CAACE,OAAlB,CAAP;AAEJ;AAEA;;AACA,SAAK,QAAL;AACI,YAAMC,eAAe,GAAGJ,KAAK,CAACK,OAAN,CAAcJ,MAAM,CAACE,OAArB,CAAxB;AACA,aAAOH,KAAK,CAACM,MAAN,CAAa,CAACC,IAAD,EAAOC,KAAP,KAAiBA,KAAK,KAAKJ,eAAxC,CAAP;;AAEJ,SAAK,SAAL;AACI,aAAOJ,KAAP;AAjBR;AAmBH,CApBD;;AAsBA,eAAeD,WAAf","sourcesContent":["// an arrow function\n// first argument is always state.\n// we want it to be an array; empty array as a default.\n\nconst cartReducer = (state = [], action) => {\n    switch (action.type) {\n        // case for add; use inmutable JavaScript spread operator to take what we already had in the state.\n        // 1. take 7 items out of the original state array and dump them one by one into this new array. \n        // 2. action.payload takes item we are adding to the cart and adds it ot the end.   \n        // 3. returns a brand new array, that's going to have all the avlues of the old array plus the new value that we are adding in. \n\n        case 'ADD':\n            return [...state, action.payload];\n\n        // Case for Remove; const for the firstMatchIndex, just return the first index we want to remove. If more than one of these \"action.payload\" in our current cart will grab first one and return the index of that item. \n\n        // Description of return; will filter out the first item and give us the remaining items. Give us all of the items except for our first match. \n        case 'REMOVE':\n            const firstMatchIndex = state.indexOf(action.payload)\n            return state.filter((item, index) => index !== firstMatchIndex);\n\n        case 'DEFAULT':\n            return state;\n    }\n}\n\nexport default cartReducer; "]},"metadata":{},"sourceType":"module"}